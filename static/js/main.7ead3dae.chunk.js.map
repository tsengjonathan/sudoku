{"version":3,"sources":["components/Sudoku/SudokuCell.jsx","utils/extractors.js","solvers/bruteForce.js","utils/validifiers.js","puzzles/11-03-2019.js","utils/adaptors.js","components/Sudoku/Sudoku.jsx","components/Sudoku/index.js","components/NumberSelector/NumberSelector.jsx","components/NumberSelector/index.js","components/Game/Game.jsx","components/Game/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["SudokuCell","value","onClick","rowIdx","colIdx","toaster","warning","display","borderTop","borderRight","borderBottom","borderLeft","getBorders","Pane","border","width","majorScale","height","cursor","alignItems","justifyContent","Code","appearance","className","getBlockBoundsByIndex","idx","idxRem","getStakeholdersFromIndex","sudoku","row","slice","getRowFromIndex","column","forEach","push","getColumnFromIndex","block","rowLow","rowHigh","colLow","colHigh","i","j","getBlockFromIndex","concat","getSmallestInputNum","initialVal","usedNumbers","_","uniq","sort","availableInputs","range","pullAll","length","bruteForce","inputSudoku","cloneDeep","index","visited","Math","floor","includes","inputNum","indexOf","validSudokuMatrix","set","isArray","every","rows","columns","undefined","Error","result","col","rowsToColumns","blocks","indexBlocks","chunk","rowBlock","colBlock","rowsToBlocks","templateSudoku","Sudoku","numberSelected","useState","setSudoku","solvedSudoku","setSolvedSudoku","useEffect","console","debug","flexWrap","map","cell","val","newSudoku","setCell","toNumber","parseInt","NumberSelector","onChange","filledValues","props","margin","marginTop","marginRight","marginBottom","marginLeft","filteredValues","radioOptions","option","Radio","name","key","label","toString","disabled","e","target","defaultProps","Game","setNumberSelected","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ead3dae.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Pane, Code, majorScale, toaster,\n} from 'evergreen-ui';\n\nimport './sudoku.css';\n\n/**\n * Generate borders for boxes in the Sudoku.\n *\n * @param {number} rowIdx row index of the cell\n * @param {number} colIdx column index of the cell\n * @returns {object} border specifications that are passed to the Pane component\n */\nfunction getBorders(rowIdx, colIdx) {\n  const borderVariant = 'default';\n  return {\n    borderTop: rowIdx % 3 === 0 ? borderVariant : null,\n    borderRight: colIdx % 3 === 2 ? borderVariant : null,\n    borderBottom: rowIdx % 3 === 2 ? borderVariant : null,\n    borderLeft: colIdx % 3 === 0 ? borderVariant : null,\n  };\n}\n\n/**\n * Individual Sudoku cell that makes up the Sudoku\n *\n * @returns {React.ReactElement} SudokuCell\n */\nfunction SudokuCell({\n  value, onClick, rowIdx, colIdx,\n}) {\n  if (typeof value !== 'number') {\n    toaster.warning(`Invalid type passed to SudokuCell: expected number, got ${typeof value}`);\n  }\n  const display = value <= 9 && value >= 1 ? value : 0;\n\n  const {\n    borderTop, borderRight, borderBottom, borderLeft,\n  } = getBorders(rowIdx, colIdx);\n\n  return (\n    <Pane\n      border=\"muted\"\n      width={majorScale(4)}\n      height={majorScale(4)}\n      cursor=\"default\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      onClick={onClick}\n      borderTop={borderTop}\n      borderRight={borderRight}\n      borderBottom={borderBottom}\n      borderLeft={borderLeft}\n    >\n      <Code appearance=\"minimal\" className=\"noselect\">{display}</Code>\n    </Pane>\n  );\n}\n\nSudokuCell.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  rowIdx: PropTypes.number.isRequired,\n  colIdx: PropTypes.number.isRequired,\n};\n\nexport default SudokuCell;\n","/**\n * Returns the row where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} row containing the specified cell\n */\nfunction getRowFromIndex(rowIdx, colIdx, sudoku) {\n  return sudoku[rowIdx].slice();\n}\n\n/**\n * Returns the column where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} column containing the specified cell\n */\nfunction getColumnFromIndex(rowIdx, colIdx, sudoku) {\n  const column = [];\n  sudoku.forEach((row) => column.push(row[colIdx]));\n  return column;\n}\n\n/**\n * Computes the lower and upper bounds of the block where the index is located.\n *\n * @example\n * // returns [0, 2]\n * getBlockBoundsByIndex(0)\n * @example\n * // returns [3, 5]\n * getBlockBoundsByIndex(5)\n * @param {number} idx zero-based index of the cell (applies to rows and columns)\n * @returns {Array.<number>} lower and upper block bounds of the given index\n */\nfunction getBlockBoundsByIndex(idx) {\n  const idxRem = idx % 3;\n  return [\n    idxRem === 0 ? idx : idx - (idxRem),\n    idxRem === 2 ? idx : idx + 2 - (idxRem),\n  ];\n}\n\n/**\n * Returns the block where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} block containing the specified cell\n */\nfunction getBlockFromIndex(rowIdx, colIdx, sudoku) {\n  const [rowLow, rowHigh] = getBlockBoundsByIndex(rowIdx);\n  const [colLow, colHigh] = getBlockBoundsByIndex(colIdx);\n  const block = [];\n\n  for (let i = rowLow; i <= rowHigh; i += 1) {\n    for (let j = colLow; j <= colHigh; j += 1) {\n      block.push(sudoku[i][j]);\n    }\n  }\n\n  return block;\n}\n\n/**\n * Returns the row, column, and block where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} concatenated array of the cell's stakeholders\n */\nfunction getStakeholdersFromIndex(rowIdx, colIdx, sudoku) {\n  const row = getRowFromIndex(rowIdx, colIdx, sudoku);\n  const column = getColumnFromIndex(rowIdx, colIdx, sudoku);\n  const block = getBlockFromIndex(rowIdx, colIdx, sudoku);\n\n  return row.concat(column).concat(block);\n}\n\n\nexport {\n  getRowFromIndex,\n  getColumnFromIndex,\n  getBlockFromIndex,\n  getStakeholdersFromIndex,\n};\n","import _ from 'lodash';\n\nimport { getStakeholdersFromIndex } from '../utils/extractors';\n\n/**\n * Given the position of the cell, determine what the next smallest valid value should be.\n * If no valid values are found, then return 0.\n *\n * `initialVal` is needed because our solver may need to backtrack and we don't want to\n * retry the same numbers again.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @param {number} initialVal initial value to start checking\n * @returns {number} smallest valid input number for the given cell, otherwise 0\n */\nfunction getSmallestInputNum(rowIdx, colIdx, sudoku, initialVal) {\n  const usedNumbers = _.uniq(getStakeholdersFromIndex(rowIdx, colIdx, sudoku)).sort();\n  const availableInputs = _.range(initialVal + 1, 10);\n  _.pullAll(availableInputs, usedNumbers);\n\n  if (availableInputs.length === 0) {\n    return 0;\n  }\n  return availableInputs[0];\n}\n\n/**\n * Brute force algorithm implementation to solve a given Sudoku.\n * This algorithm iterates through each cell sequentially, finds the smallest value\n * that can be added to that cell; if no solution exists for a given cell, it backtracks\n * to the previous cell and finds the next valid input for that given cell.\n *\n * We may be able to use this algorithm to generate Sudokus. All we need to do is\n * change the algorithm such that it searches through numbers randomly rather than sequentially.\n *\n * @param {Array.<Array.<number>>} inputSudoku row representation of the sudoku\n * @returns {Array.<Array.<number>>} solved sudoku\n */\nfunction bruteForce(inputSudoku) {\n  const sudoku = _.cloneDeep(inputSudoku);\n  let index = 0;\n  const visited = [];\n\n  while (index < 81) {\n    const rowIdx = Math.floor(index / 9);\n    const colIdx = index % 9;\n\n    const initialVal = sudoku[rowIdx][colIdx];\n\n    if (initialVal === 0 || visited.includes(index)) {\n      const inputNum = getSmallestInputNum(rowIdx, colIdx, sudoku, initialVal);\n\n      if (inputNum !== 0) {\n        sudoku[rowIdx][colIdx] = inputNum;\n        if (!visited.includes(index)) {\n          visited.push(index);\n        }\n        index += 1;\n      } else if (initialVal === sudoku[rowIdx][colIdx]) {\n        sudoku[rowIdx][colIdx] = 0;\n        if (visited.includes(index)) {\n          index = visited[visited.indexOf(index) - 1];\n        } else {\n          index = visited[visited.length - 1];\n        }\n      }\n    } else {\n      index += 1;\n    }\n  }\n  return sudoku;\n}\n\nexport default bruteForce;\n","import _ from 'lodash';\n\n/**\n * Checks if the given set if a valid Sudoku matrix.\n * A Sudoku matrix is one that resembles a 9x9 matrix -\n * meaning that the set has 9 subarrays in total,\n * and each subarray has 9 number elements.\n *\n * @param {*} set arbitrary input to check\n * @returns {boolean} whether the input is a valid sudoku matrix\n */\nfunction validSudokuMatrix(set) {\n  return _.isArray(set)\n    && set.length === 9\n    && _.every(set, (row) => row && row.length === 9);\n}\n\n/**\n * Checks if the given array is a valid Sudoku array.\n * A valid Sudoku array is defined as an array with non-repeating values, 1 to 9 inclusive\n * Used to check if a given row/column/square of sudoku numbers are valid\n *\n * @param {*} set arbitrary input to check for a valid sudoku array\n * @returns {boolean} whether the input is a valid sudoku array or not\n */\nfunction validSudokuArray(set) {\n  if (!set || !Object.prototype.hasOwnProperty.call(set, 'length') || set.length !== 9) {\n    return false;\n  }\n\n  const validNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  return _.xor(set, validNumbers).length === 0;\n}\n\n/**\n * Checks if a given Sudoku is solved.\n * A solved Sudoku is one that has no empty values.\n *\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {boolean} true is the sudoku is solved, false otherwise\n */\nfunction isSolved(sudoku) {\n  if (!validSudokuMatrix(sudoku)) {\n    return false;\n  }\n\n  return sudoku.every((row) => row.every((cell) => cell !== 0));\n}\n\nexport {\n  validSudokuMatrix,\n  validSudokuArray,\n  isSolved,\n};\n","import { rowsToColumns, rowsToBlocks } from '../utils/adaptors';\n\nconst sudoku = {\n  rows: [\n    [1, 0, 0, 7, 0, 9, 0, 0, 0],\n    [5, 8, 0, 0, 0, 0, 0, 3, 0],\n    [7, 0, 6, 0, 0, 0, 0, 1, 9],\n    [0, 7, 0, 0, 0, 3, 0, 0, 8],\n    [9, 0, 1, 0, 0, 0, 0, 0, 2],\n    [6, 0, 8, 5, 0, 0, 0, 0, 7],\n    [0, 0, 7, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 9, 0, 0, 4, 0, 3],\n    [0, 0, 4, 0, 7, 6, 8, 5, 0],\n  ],\n};\n\nsudoku.columns = rowsToColumns(sudoku.rows);\nsudoku.blocks = rowsToBlocks(sudoku.rows);\n\nexport default sudoku;\n","import _ from 'lodash';\n\nimport { validSudokuMatrix } from './validifiers';\n\n/**\n * Converts a row-based Sudoku to a column-based one.\n *\n * @param {Array.<Array.<number>>} sudoku row-based sudoku\n * @returns {Array.<Array.<number>>} column-based representation of the given sudoku\n */\nfunction rowsToColumns(sudoku) {\n  if (!validSudokuMatrix(sudoku)) {\n    const columns = sudoku[0] ? sudoku[0].length : undefined;\n    throw Error(`rowsToColumns expected a 9x9 Array - received ${sudoku.length}x${columns} array instead`);\n  }\n\n  const result = [];\n  for (let col = 0; col < sudoku[0].length; col += 1) {\n    const column = [];\n    for (let row = 0; row < sudoku.length; row += 1) {\n      column.push(sudoku[row][col]);\n    }\n    result.push(column);\n  }\n  return result;\n}\n\n/**\n * Converts a row-based Sudoku to a block-based one.\n *\n * @param {Array.<Array.<number>>} sudoku row-based sudoku\n * @returns {Array.<Array.<number>>} block-based representation of the given sudoku\n */\nfunction rowsToBlocks(sudoku) {\n  if (!validSudokuMatrix(sudoku)) {\n    const columns = sudoku[0] ? sudoku[0].length : undefined;\n    throw Error(`rowsToBlocks expected a 9x9 Array - received ${sudoku.length}x${columns} array instead`);\n  }\n\n  const blocks = [];\n  const indexBlocks = _.chunk(_.range(9), 3);\n  indexBlocks.forEach((rowBlock) => {\n    indexBlocks.forEach((colBlock) => {\n      const block = [];\n      rowBlock.forEach((row) => {\n        colBlock.forEach((col) => {\n          block.push(sudoku[row][col]);\n        });\n      });\n      blocks.push(block);\n    });\n  });\n  return blocks;\n}\n\nexport {\n  rowsToColumns,\n  rowsToBlocks,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane, majorScale } from 'evergreen-ui';\n\nimport SudokuCell from './SudokuCell';\nimport bruteForce from '../../solvers/bruteForce';\nimport exampleSudoku from '../../puzzles/11-03-2019';\n\nconst templateSudoku = exampleSudoku.rows;\n\n/**\n * Sudoku component containing all of the Sudoku logic\n *\n * @returns {React.ReactElement} Sudoku\n */\nfunction Sudoku({ numberSelected }) {\n  const [sudoku, setSudoku] = useState([]);\n  const [solvedSudoku, setSolvedSudoku] = useState([]);\n\n  useEffect(() => {\n    setSudoku(templateSudoku);\n    setSolvedSudoku(bruteForce(templateSudoku, true));\n  }, []);\n\n  useEffect(() => {\n    console.debug('Solved sudoku', solvedSudoku);\n  }, [solvedSudoku]);\n\n  /**\n   * @param {number} rowIdx row index of the sudoku cell to change\n   * @param {number} colIdx column index of the sudoku cell to change\n   * @param {number} val value [0, 9] to change to\n   */\n  function setCell(rowIdx, colIdx, val) {\n    const newSudoku = sudoku.slice();\n    newSudoku[rowIdx][colIdx] = val;\n    setSudoku(newSudoku);\n  }\n\n  return (\n    <Pane display=\"inline-flex\" flexWrap=\"wrap\" width={majorScale(4) * 9}>\n      {\n        sudoku.map((row, rowIdx) => row.map((cell, colIdx) => (\n          <SudokuCell\n            value={cell}\n            rowIdx={rowIdx}\n            colIdx={colIdx}\n            onClick={() => setCell(rowIdx, colIdx, numberSelected)}\n          />\n        )))\n      }\n    </Pane>\n  );\n}\n\nSudoku.propTypes = {\n  numberSelected: PropTypes.number.isRequired,\n};\n\nexport default Sudoku;\n","import Sudoku from './Sudoku';\nimport SudokuCell from './SudokuCell';\n\nexport default Sudoku;\n\nexport { SudokuCell };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Radio, Pane } from 'evergreen-ui';\n\n/**\n * Converts a cell value to a number, since the cell value can be a string or a number.\n *\n * @param {number|string} value cell value to be converted\n * @returns {number} corresponding number for the given value\n */\nfunction toNumber(value) {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n\n/**\n * Select which number to input into the Sudoku grid.\n *\n * @param {Function} onChange handle triggers when user selects a different number\n * @returns {React.ReactElement} NumberSelector component\n */\nfunction NumberSelector({ onChange, filledValues, ...props }) {\n  const {\n    margin, marginTop, marginRight, marginBottom, marginLeft,\n  } = props;\n  // Storybook knobs only allow string arrays\n  const filteredValues = filledValues.map(toNumber);\n\n  const radioOptions = _.range(1, 10)\n    .map((option) => (\n      <Radio\n        name=\"group\"\n        key={option}\n        label={option}\n        value={option.toString()}\n        disabled={filteredValues.includes(option)}\n        onChange={(e) => onChange(toNumber(e.target.value))}\n      />\n    ));\n\n  return (\n    <Pane\n      margin={margin}\n      marginTop={marginTop}\n      marginRight={marginRight}\n      marginBottom={marginBottom}\n      marginLeft={marginLeft}\n    >\n      {radioOptions}\n    </Pane>\n  );\n}\n\nNumberSelector.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filledValues: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.number),\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  margin: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n};\n\nNumberSelector.defaultProps = {\n  filledValues: [],\n  margin: undefined,\n  marginTop: undefined,\n  marginRight: undefined,\n  marginBottom: undefined,\n  marginLeft: undefined,\n};\n\nexport default NumberSelector;\n","import NumberSelector from './NumberSelector';\n\nexport default NumberSelector;\n","import React, { useState } from 'react';\nimport { Pane, majorScale } from 'evergreen-ui';\n\nimport Sudoku from '../Sudoku';\nimport NumberSelector from '../NumberSelector';\n\n/**\n * Game component containing the Sudoku and the NumberSelector\n *\n * @returns {React.ReactElement} Game\n */\nfunction Game() {\n  const [numberSelected, setNumberSelected] = useState(0);\n\n  return (\n    <Pane display=\"flex\">\n      <Sudoku numberSelected={numberSelected} />\n      <NumberSelector onChange={setNumberSelected} marginLeft={majorScale(1)} />\n    </Pane>\n  );\n}\n\nexport default Game;\n","import Game from './Game';\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game';\n\n/**\n * Parent wrapper for all React code\n *\n * @returns {React.ReactElement} App\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}