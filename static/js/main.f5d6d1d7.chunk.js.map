{"version":3,"sources":["components/Sudoku/SudokuCell.jsx","utils/adaptors.js","puzzles/empty.js","puzzles/11-03-2019.js","puzzles/11-23-2019.js","puzzles/index.js","utils/extractors.js","solvers/bruteForce.js","contexts/SudokuContext.jsx","components/Sudoku/Sudoku.jsx","components/Sudoku/index.js","components/NumberSelector/NumberSelector.jsx","components/NumberSelector/index.js","components/ControlCenter/ControlButton.jsx","components/ControlCenter/ControlCenter.jsx","components/ControlCenter/index.js","components/Game/Game.jsx","components/Game/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["SudokuCell","value","onClick","rowIdx","colIdx","fixed","toaster","warning","display","borderTop","borderRight","borderBottom","borderLeft","getBorders","Pane","border","width","majorScale","height","cursor","alignItems","justifyContent","Code","appearance","className","fontWeight","prepareSudoku","sudoku","map","row","random","_","sample","puzzle1","puzzle2","getBlockBoundsByIndex","idx","idxRem","getStakeholdersFromIndex","slice","getRowFromIndex","column","forEach","push","getColumnFromIndex","block","rowLow","rowHigh","colLow","colHigh","i","j","getBlockFromIndex","concat","stakeholder","getInputNum","retries","index","usedNumbers","uniq","triedNumbers","invalidNumbers","union","sort","validNumbers","shuffle","difference","range","length","retry","pop","bruteForce","inputSudoku","cloneDeep","visited","initializeRetries","Math","floor","cell","initialVal","inputNum","includes","indexOf","randomSudoku","reducer","state","action","type","val","newSudoku","empty","SudokuContext","createContext","SudokuContextProvider","children","useReducer","useState","numberSelected","setNumberSelected","Provider","Sudoku","useContext","flexWrap","key","toNumber","parseInt","NumberSelector","filledValues","props","margin","marginTop","marginRight","marginBottom","marginLeft","filteredValues","radioOptions","option","Radio","name","label","toString","disabled","onChange","e","target","defaultProps","undefined","ControlButton","title","dispatchType","iconBefore","spaceBelow","Button","ControlCenter","Card","flexDirection","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5d6d1d7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Pane, Code, majorScale, toaster,\n} from 'evergreen-ui';\n\nimport './sudoku.css';\n\n/**\n * Generate borders for boxes in the Sudoku.\n *\n * @param {number} rowIdx row index of the cell\n * @param {number} colIdx column index of the cell\n * @returns {object} border specifications that are passed to the Pane component\n */\nfunction getBorders(rowIdx, colIdx) {\n  const borderVariant = 'default';\n  return {\n    borderTop: rowIdx % 3 === 0 ? borderVariant : null,\n    borderRight: colIdx % 3 === 2 ? borderVariant : null,\n    borderBottom: rowIdx % 3 === 2 ? borderVariant : null,\n    borderLeft: colIdx % 3 === 0 ? borderVariant : null,\n  };\n}\n\n/**\n * Individual Sudoku cell that makes up the Sudoku\n *\n * @returns {React.ReactElement} SudokuCell\n */\nfunction SudokuCell({\n  value, onClick, rowIdx, colIdx, fixed,\n}) {\n  if (typeof value !== 'number') {\n    toaster.warning(`Invalid type passed to SudokuCell: expected number, got ${typeof value}`);\n  }\n  const display = value <= 9 && value >= 1 ? value : 0;\n\n  const {\n    borderTop, borderRight, borderBottom, borderLeft,\n  } = getBorders(rowIdx, colIdx);\n\n  return (\n    <Pane\n      border=\"muted\"\n      width={majorScale(4)}\n      height={majorScale(4)}\n      cursor=\"default\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      onClick={fixed ? null : onClick}\n      borderTop={borderTop}\n      borderRight={borderRight}\n      borderBottom={borderBottom}\n      borderLeft={borderLeft}\n    >\n      <Code\n        appearance=\"minimal\"\n        className=\"noselect\"\n        fontWeight={fixed ? 800 : null}\n      >\n        {display}\n      </Code>\n    </Pane>\n  );\n}\n\nSudokuCell.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  rowIdx: PropTypes.number.isRequired,\n  colIdx: PropTypes.number.isRequired,\n  fixed: PropTypes.bool.isRequired,\n};\n\nexport default SudokuCell;\n","import _ from 'lodash';\n\nimport { validSudokuMatrix } from './validifiers';\n\n/**\n * Converts a row-based Sudoku to a column-based one.\n *\n * @param {Array.<Array.<number>>} sudoku row-based sudoku\n * @returns {Array.<Array.<number>>} column-based representation of the given sudoku\n */\nfunction rowsToColumns(sudoku) {\n  if (!validSudokuMatrix(sudoku)) {\n    const columns = sudoku[0] ? sudoku[0].length : undefined;\n    throw Error(`rowsToColumns expected a 9x9 Array - received ${sudoku.length}x${columns} array instead`);\n  }\n\n  const result = [];\n  for (let col = 0; col < sudoku[0].length; col += 1) {\n    const column = [];\n    for (let row = 0; row < sudoku.length; row += 1) {\n      column.push(sudoku[row][col]);\n    }\n    result.push(column);\n  }\n  return result;\n}\n\n/**\n * Converts a row-based Sudoku to a block-based one.\n *\n * @param {Array.<Array.<number>>} sudoku row-based sudoku\n * @returns {Array.<Array.<number>>} block-based representation of the given sudoku\n */\nfunction rowsToBlocks(sudoku) {\n  if (!validSudokuMatrix(sudoku)) {\n    const columns = sudoku[0] ? sudoku[0].length : undefined;\n    throw Error(`rowsToBlocks expected a 9x9 Array - received ${sudoku.length}x${columns} array instead`);\n  }\n\n  const blocks = [];\n  const indexBlocks = _.chunk(_.range(9), 3);\n  indexBlocks.forEach((rowBlock) => {\n    indexBlocks.forEach((colBlock) => {\n      const block = [];\n      rowBlock.forEach((row) => {\n        colBlock.forEach((col) => {\n          block.push(sudoku[row][col]);\n        });\n      });\n      blocks.push(block);\n    });\n  });\n  return blocks;\n}\n\n/**\n * Prepares the Sudoku by iterating through each cell and wrapping each cell into an object.\n *\n * @param {Array.<Array.<number>>} sudoku raw sudoku to convert\n * @returns {Array.<Array.<object>>} wrapped sudoku where each cell is an object\n */\nfunction prepareSudoku(sudoku) {\n  return sudoku.map((row) => row.map((value) => ({\n    value,\n    fixed: value !== 0,\n  })));\n}\n\nexport {\n  rowsToColumns,\n  rowsToBlocks,\n  prepareSudoku,\n};\n","import { prepareSudoku } from '../utils/adaptors';\n\nconst sudoku = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nexport default prepareSudoku(sudoku);\n","import { prepareSudoku } from '../utils/adaptors';\n\nconst sudoku = [\n  [1, 0, 0, 7, 0, 9, 0, 0, 0],\n  [5, 8, 0, 0, 0, 0, 0, 3, 0],\n  [7, 0, 6, 0, 0, 0, 0, 1, 9],\n  [0, 7, 0, 0, 0, 3, 0, 0, 8],\n  [9, 0, 1, 0, 0, 0, 0, 0, 2],\n  [6, 0, 8, 5, 0, 0, 0, 0, 7],\n  [0, 0, 7, 0, 3, 0, 0, 0, 0],\n  [0, 0, 0, 9, 0, 0, 4, 0, 3],\n  [0, 0, 4, 0, 7, 6, 8, 5, 0],\n];\n\nexport default prepareSudoku(sudoku);\n","import { prepareSudoku } from '../utils/adaptors';\n\nconst sudoku = [\n  [0, 0, 0, 0, 0, 1, 0, 8, 0],\n  [8, 1, 0, 6, 0, 0, 0, 0, 7],\n  [0, 0, 4, 0, 2, 0, 6, 0, 0],\n  [0, 6, 0, 2, 0, 8, 0, 0, 0],\n  [0, 0, 5, 0, 0, 0, 0, 0, 2],\n  [0, 0, 0, 7, 0, 3, 1, 9, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [4, 0, 1, 9, 0, 2, 0, 7, 8],\n  [0, 0, 6, 1, 0, 0, 0, 0, 9],\n];\n\nexport default prepareSudoku(sudoku);\n","import _ from 'lodash';\n\nimport empty from './empty';\nimport puzzle1 from './11-03-2019';\nimport puzzle2 from './11-23-2019';\n\n/**\n * Selects a random sudoku from the directory that's not empty.\n *\n * @returns {Array.<Array.<number>>} a random sudoku\n */\nfunction random() {\n  return _.sample([puzzle1, puzzle2]);\n}\n\nexport {\n  empty,\n  random,\n};\n","/**\n * Returns the row where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} row containing the specified cell\n */\nfunction getRowFromIndex(rowIdx, colIdx, sudoku) {\n  return sudoku[rowIdx].slice();\n}\n\n/**\n * Returns the column where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} column containing the specified cell\n */\nfunction getColumnFromIndex(rowIdx, colIdx, sudoku) {\n  const column = [];\n  sudoku.forEach((row) => column.push(row[colIdx]));\n  return column;\n}\n\n/**\n * Computes the lower and upper bounds of the block where the index is located.\n *\n * @example\n * // returns [0, 2]\n * getBlockBoundsByIndex(0)\n * @example\n * // returns [3, 5]\n * getBlockBoundsByIndex(5)\n * @param {number} idx zero-based index of the cell (applies to rows and columns)\n * @returns {Array.<number>} lower and upper block bounds of the given index\n */\nfunction getBlockBoundsByIndex(idx) {\n  const idxRem = idx % 3;\n  return [\n    idxRem === 0 ? idx : idx - (idxRem),\n    idxRem === 2 ? idx : idx + 2 - (idxRem),\n  ];\n}\n\n/**\n * Returns the block where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} block containing the specified cell\n */\nfunction getBlockFromIndex(rowIdx, colIdx, sudoku) {\n  const [rowLow, rowHigh] = getBlockBoundsByIndex(rowIdx);\n  const [colLow, colHigh] = getBlockBoundsByIndex(colIdx);\n  const block = [];\n\n  for (let i = rowLow; i <= rowHigh; i += 1) {\n    for (let j = colLow; j <= colHigh; j += 1) {\n      block.push(sudoku[i][j]);\n    }\n  }\n\n  return block;\n}\n\n/**\n * Returns the row, column, and block where the specified cell is located.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @returns {Array.<number>} concatenated array of the cell's stakeholders\n */\nfunction getStakeholdersFromIndex(rowIdx, colIdx, sudoku) {\n  const row = getRowFromIndex(rowIdx, colIdx, sudoku);\n  const column = getColumnFromIndex(rowIdx, colIdx, sudoku);\n  const block = getBlockFromIndex(rowIdx, colIdx, sudoku);\n  const stakeholders = row.concat(column).concat(block);\n\n  return stakeholders.map((stakeholder) => stakeholder.value);\n}\n\n\nexport {\n  getRowFromIndex,\n  getColumnFromIndex,\n  getBlockFromIndex,\n  getStakeholdersFromIndex,\n};\n","import _ from 'lodash';\n\nimport { getStakeholdersFromIndex } from '../utils/extractors';\n\n/**\n * Given the position of the cell, find another valid input that isn't used before.\n * If no valid values are found, then return 0.\n *\n * @param {number} rowIdx zero-based row index of the cell\n * @param {number} colIdx zero-based column index of the cell\n * @param {Array.<Array.<number>>} sudoku row representation of the sudoku\n * @param {object} retries a map of each cell's attempted numbers\n * @returns {number} random valid input number for the given cell, otherwise 0\n */\nfunction getInputNum(rowIdx, colIdx, sudoku, retries) {\n  const index = rowIdx * 9 + colIdx;\n  const usedNumbers = _.uniq(getStakeholdersFromIndex(rowIdx, colIdx, sudoku));\n  const triedNumbers = retries[index];\n  const invalidNumbers = _.union(usedNumbers, triedNumbers).sort();\n  const validNumbers = _.shuffle(_.difference(_.range(1, 10), invalidNumbers));\n\n  if (validNumbers.length === 0) {\n    const retry = retries[index];\n    while (retry.length) {\n      retry.pop();\n    }\n    return 0;\n  }\n  retries[index].push(validNumbers[0]);\n  return validNumbers[0];\n}\n\n/**\n * Initialize the `retries` object mapping to keep track of attempted numbers.\n *\n * @returns {object} keys [0, 81] with empty array values\n */\nfunction initializeRetries() {\n  const retries = {};\n  for (let i = 0; i < 81; i += 1) {\n    retries[i] = [];\n  }\n  return retries;\n}\n\n/**\n * Brute force algorithm implementation to solve a given Sudoku.\n * This algorithm iterates through each cell sequentially, finds the smallest value\n * that can be added to that cell; if no solution exists for a given cell, it backtracks\n * to the previous cell and finds the next valid input for that given cell.\n *\n * We may be able to use this algorithm to generate Sudokus. All we need to do is\n * change the algorithm such that it searches through numbers randomly rather than sequentially.\n *\n * @param {Array.<Array.<number>>} inputSudoku row representation of the sudoku\n * @returns {Array.<Array.<number>>} solved sudoku\n */\nfunction bruteForce(inputSudoku) {\n  const sudoku = _.cloneDeep(inputSudoku);\n  let index = 0;\n  const visited = [];\n  const retries = initializeRetries();\n\n  while (index < 81) {\n    const rowIdx = Math.floor(index / 9);\n    const colIdx = index % 9;\n\n    const cell = sudoku[rowIdx][colIdx];\n    const initialVal = sudoku[rowIdx][colIdx].value;\n\n    if (!cell.fixed) {\n      const inputNum = getInputNum(rowIdx, colIdx, sudoku, retries);\n\n      if (inputNum !== 0) {\n        cell.value = inputNum;\n        if (!visited.includes(index)) {\n          visited.push(index);\n        }\n        index += 1;\n      } else if (initialVal === cell.value) {\n        cell.value = 0;\n        if (visited.includes(index)) {\n          index = visited[visited.indexOf(index) - 1];\n        } else {\n          index = visited[visited.length - 1];\n        }\n      }\n    } else {\n      index += 1;\n    }\n  }\n  return sudoku;\n}\n\nexport default bruteForce;\n","import React, { createContext, useReducer, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { empty, random } from '../puzzles';\nimport bruteForce from '../solvers/bruteForce';\n\nconst randomSudoku = random();\n\n/**\n * Reducer function to handle Sudoku logic\n *\n * @param {Array.<Array.<number>>} state sudoku state\n * @param {object} action action to trigger the state change\n * @returns {Array.<Array.<number>>} new sudoku state based on the action given\n */\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'assign': {\n      const { rowIdx, colIdx, val } = action;\n      const newSudoku = state.slice();\n      const cell = newSudoku[rowIdx][colIdx];\n      cell.value = val;\n      return newSudoku;\n    }\n    case 'solve':\n      return bruteForce(state);\n    case 'randomize':\n      return random();\n    case 'generate':\n      return bruteForce(empty);\n    case 'empty':\n      return empty;\n    case 'reset':\n      return randomSudoku;\n    default:\n      return state;\n  }\n}\n\nconst SudokuContext = createContext();\n\n/**\n * Provider for SudokuContext\n *\n * @param {React.ReactElement} children children components to pass context to\n * @returns {React.ReactElement} children components wrapped in a context provider\n */\nfunction SudokuContextProvider({ children }) {\n  const [sudoku, action] = useReducer(reducer, randomSudoku);\n  const [numberSelected, setNumberSelected] = useState(0);\n\n  // console.debug('Solved Sudoku', bruteForce(sudoku));\n\n  return (\n    <SudokuContext.Provider value={{\n      sudoku, action, numberSelected, setNumberSelected,\n    }}\n    >\n      { children }\n    </SudokuContext.Provider>\n  );\n}\n\nSudokuContextProvider.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.array.isRequired,\n};\n\nexport {\n  SudokuContext,\n  SudokuContextProvider,\n};\n","import React, { useContext } from 'react';\nimport { Pane, majorScale } from 'evergreen-ui';\n\nimport SudokuCell from './SudokuCell';\nimport { SudokuContext } from '../../contexts/SudokuContext';\n\n/**\n * Sudoku component containing all of the Sudoku logic\n *\n * @returns {React.ReactElement} Sudoku\n */\nfunction Sudoku() {\n  const { sudoku, action, numberSelected } = useContext(SudokuContext);\n\n  return (\n    <Pane display=\"inline-flex\" flexWrap=\"wrap\" width={majorScale(4) * 9}>\n      {\n        sudoku.map((row, rowIdx) => row.map((cell, colIdx) => {\n          const { value, fixed } = cell;\n          const idx = rowIdx * 9 + colIdx;\n          return (\n            <SudokuCell\n              key={idx}\n              value={value}\n              rowIdx={rowIdx}\n              colIdx={colIdx}\n              fixed={fixed}\n              onClick={() => action({\n                type: 'assign',\n                rowIdx,\n                colIdx,\n                val: numberSelected,\n              })}\n            />\n          );\n        }))\n      }\n    </Pane>\n  );\n}\n\nexport default Sudoku;\n","import Sudoku from './Sudoku';\nimport SudokuCell from './SudokuCell';\n\nexport default Sudoku;\n\nexport { SudokuCell };\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Radio, Pane } from 'evergreen-ui';\n\nimport { SudokuContext } from '../../contexts/SudokuContext';\n\n/**\n * Converts a cell value to a number, since the cell value can be a string or a number.\n *\n * @param {number|string} value cell value to be converted\n * @returns {number} corresponding number for the given value\n */\nfunction toNumber(value) {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n\n/**\n * Select which number to input into the Sudoku grid.\n *\n * @param {Function} onChange handle triggers when user selects a different number\n * @returns {React.ReactElement} NumberSelector component\n */\nfunction NumberSelector({ filledValues, ...props }) {\n  const {\n    margin, marginTop, marginRight, marginBottom, marginLeft,\n  } = props;\n  // Storybook knobs only allow string arrays\n  const filteredValues = filledValues.map(toNumber);\n\n  const { setNumberSelected } = useContext(SudokuContext);\n\n  const radioOptions = _.range(1, 10)\n    .map((option) => (\n      <Radio\n        name=\"group\"\n        key={option}\n        label={option}\n        value={option.toString()}\n        disabled={filteredValues.includes(option)}\n        onChange={(e) => setNumberSelected(toNumber(e.target.value))}\n      />\n    ));\n\n  return (\n    <Pane\n      margin={margin}\n      marginTop={marginTop}\n      marginRight={marginRight}\n      marginBottom={marginBottom}\n      marginLeft={marginLeft}\n    >\n      {radioOptions}\n    </Pane>\n  );\n}\n\nNumberSelector.propTypes = {\n  filledValues: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.number),\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  margin: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n};\n\nNumberSelector.defaultProps = {\n  filledValues: [],\n  margin: undefined,\n  marginTop: undefined,\n  marginRight: undefined,\n  marginBottom: undefined,\n  marginLeft: undefined,\n};\n\nexport default NumberSelector;\n","import NumberSelector from './NumberSelector';\n\nexport default NumberSelector;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, majorScale } from 'evergreen-ui';\n\nimport { SudokuContext } from '../../contexts/SudokuContext';\n\n/**\n * Button wrapper to dispatch events to SudokuContext.\n *\n * @returns {React.ReactElement} ControlButton component\n */\nfunction ControlButton({\n  title, dispatchType, iconBefore, spaceBelow,\n}) {\n  const { action } = useContext(SudokuContext);\n  const dispatchAction = () => action({ type: dispatchType });\n\n  return (\n    <Button\n      onClick={dispatchAction}\n      marginBottom={spaceBelow ? majorScale(1) : undefined}\n      iconBefore={iconBefore}\n      display=\"inline-block\"\n    >\n      {title}\n    </Button>\n  );\n}\n\nControlButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  dispatchType: PropTypes.string.isRequired,\n  iconBefore: PropTypes.string,\n  spaceBelow: PropTypes.bool,\n};\n\nControlButton.defaultProps = {\n  iconBefore: undefined,\n  spaceBelow: false,\n};\n\nexport default ControlButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'evergreen-ui';\n\nimport ControlButton from './ControlButton';\n\n/**\n * Control center to hold functions such as solve or reset.\n *\n * @returns {React.ReactElement} ControlCenter component\n */\nfunction ControlCenter({ ...props }) {\n  const {\n    margin, marginTop, marginRight, marginBottom, marginLeft,\n  } = props;\n\n  return (\n    <Card\n      margin={margin}\n      marginTop={marginTop}\n      marginRight={marginRight}\n      marginBottom={marginBottom}\n      marginLeft={marginLeft}\n      display=\"flex\"\n      flexDirection=\"column\"\n    >\n      <ControlButton title=\"Solve\" dispatchType=\"solve\" spaceBelow />\n      <ControlButton title=\"Reset\" dispatchType=\"reset\" spaceBelow />\n      <ControlButton title=\"Generate\" dispatchType=\"generate\" spaceBelow />\n    </Card>\n  );\n}\n\nControlCenter.propTypes = {\n  margin: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n};\n\nControlCenter.defaultProps = {\n  margin: undefined,\n  marginTop: undefined,\n  marginRight: undefined,\n  marginBottom: undefined,\n  marginLeft: undefined,\n};\n\nexport default ControlCenter;\n","import ControlCenter from './ControlCenter';\n\nexport default ControlCenter;\n","import React from 'react';\nimport { Pane, majorScale } from 'evergreen-ui';\n\nimport Sudoku from '../Sudoku';\nimport NumberSelector from '../NumberSelector';\nimport ControlCenter from '../ControlCenter';\nimport { SudokuContextProvider } from '../../contexts/SudokuContext';\n\n/**\n * Game component containing the Sudoku and the NumberSelector\n *\n * @returns {React.ReactElement} Game\n */\nfunction Game() {\n  return (\n    <Pane display=\"flex\">\n      <SudokuContextProvider>\n        <ControlCenter marginRight={majorScale(1)} />\n        <Sudoku />\n        <NumberSelector marginLeft={majorScale(1)} />\n      </SudokuContextProvider>\n    </Pane>\n  );\n}\n\nexport default Game;\n","import Game from './Game';\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game';\n\n/**\n * Parent wrapper for all React code\n *\n * @returns {React.ReactElement} App\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}