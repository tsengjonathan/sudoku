{"version":3,"sources":["components/Sudoku/SudokuCell.jsx","components/Sudoku/Sudoku.jsx","components/Sudoku/index.js","components/NumberSelector/NumberSelector.jsx","components/NumberSelector/index.js","components/Game/Game.jsx","components/Game/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["SudokuCell","value","onClick","console","error","display","Pane","border","width","majorScale","height","cursor","alignItems","justifyContent","Code","appearance","className","generateRow","_","times","constant","Sudoku","numberSelected","useState","sudoku","setSudoku","useEffect","flexWrap","map","row","rowIdx","cell","colIdx","val","newSudoku","slice","setCell","toNumber","parseInt","NumberSelector","onChange","filledValues","props","margin","marginTop","marginRight","marginBottom","marginLeft","filteredValues","radioOptions","range","option","Radio","name","key","label","toString","disabled","includes","e","target","defaultProps","undefined","Game","setNumberSelected","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAsCeA,MA3Bf,YAAyC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACN,kBAAVD,GACTE,QAAQC,MAAR,yEAAgFH,IAElF,IAAMI,EAAUJ,GAAS,GAAKA,GAAS,EAAIA,EAAQ,EAEnD,OACE,kBAACK,EAAA,EAAD,CACEC,OAAO,QACPC,MAAOC,YAAW,GAClBC,OAAQD,YAAW,GACnBE,OAAO,UACPN,QAAQ,OACRO,WAAW,SACXC,eAAe,SACfX,QAASA,GAET,kBAACY,EAAA,EAAD,CAAMC,WAAW,UAAUC,UAAU,YAAYX,KCrBjDY,EAAc,kBAAMC,IAAEC,MAAM,EAAGD,IAAEE,SAAS,KA6CjCC,ICjDAA,EDWf,YAAqC,IAAnBC,EAAkB,EAAlBA,eAAkB,EACNC,mBAAS,IADH,mBAC3BC,EAD2B,KACnBC,EADmB,KAoBlC,OAjBAC,qBAAU,WACRD,EAAUP,IAAEC,MAAM,EAAGF,MACpB,IAgBD,kBAACX,EAAA,EAAD,CAAMD,QAAQ,cAAcsB,SAAS,OAAOnB,MAAuB,EAAhBC,YAAW,IAE1De,EAAOI,KAAI,SAACC,EAAKC,GAAN,OAAiBD,EAAID,KAAI,SAACG,EAAMC,GAAP,OAClC,kBAAC,EAAD,CACE/B,MAAO8B,EACP7B,QAAS,kBAdnB,SAAiB4B,EAAQE,EAAQC,GAC/B,IAAMC,EAAYV,EAAOW,QACzBD,EAAUJ,GAAQE,GAAUC,EAC5BR,EAAUS,GAWaE,CAAQN,EAAQE,EAAQV,c,gBE7BnD,SAASe,EAASpC,GAChB,MAAwB,kBAAVA,EAAqBqC,SAASrC,EAAO,IAAMA,EAS3D,SAASsC,EAAT,GAA+D,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,aAAiBC,EAAS,2CAE1DC,EACED,EADFC,OAAQC,EACNF,EADME,UAAWC,EACjBH,EADiBG,YAAaC,EAC9BJ,EAD8BI,aAAcC,EAC5CL,EAD4CK,WAG1CC,EAAiBP,EAAab,IAAIS,GAElCY,EAAe/B,IAAEgC,MAAM,EAAG,IAC7BtB,KAAI,SAACuB,GAAD,OACH,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,IAAKH,EACLI,MAAOJ,EACPlD,MAAOkD,EAAOK,WACdC,SAAUT,EAAeU,SAASP,GAClCX,SAAU,SAACmB,GAAD,OAAOnB,EAASH,EAASsB,EAAEC,OAAO3D,cAIlD,OACE,kBAACK,EAAA,EAAD,CACEqC,OAAQA,EACRC,UAAWA,EACXC,YAAaA,EACbC,aAAcA,EACdC,WAAYA,GAEXE,GAkBPV,EAAesB,aAAe,CAC5BpB,aAAc,GACdE,YAAQmB,EACRlB,eAAWkB,EACXjB,iBAAaiB,EACbhB,kBAAcgB,EACdf,gBAAYe,GAGCvB,ICzEAA,EDyEAA,EEpDAwB,ICrBAA,EDUf,WAAiB,IAAD,EAC8BxC,mBAAS,GADvC,mBACPD,EADO,KACS0C,EADT,KAGd,OACE,kBAAC1D,EAAA,EAAD,CAAMD,QAAQ,QACZ,kBAAC,EAAD,CAAQiB,eAAgBA,IACxB,kBAAC,EAAD,CAAgBkB,SAAUwB,EAAmBjB,WAAYtC,YAAW,OEA3DwD,MARf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,QCCckD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b258128a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane, Code, majorScale } from 'evergreen-ui';\n\nimport './sudoku.css';\n\n/**\n * Individual Sudoku cell that makes up the Sudoku\n *\n * @returns {React.ReactElement} SudokuCell\n */\nfunction SudokuCell({ value, onClick }) {\n  if (typeof value !== 'number') {\n    console.error(`Invalid type passed to SudokuCell: expected number, got ${typeof value}`);\n  }\n  const display = value <= 9 && value >= 1 ? value : 0;\n\n  return (\n    <Pane\n      border=\"muted\"\n      width={majorScale(4)}\n      height={majorScale(4)}\n      cursor=\"default\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      onClick={onClick}\n    >\n      <Code appearance=\"minimal\" className=\"noselect\">{display}</Code>\n    </Pane>\n  );\n}\n\nSudokuCell.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default SudokuCell;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Pane, majorScale } from 'evergreen-ui';\n\nimport SudokuCell from './SudokuCell';\n\nconst generateRow = () => _.times(9, _.constant(0));\n\n/**\n * Sudoku component containing all of the Sudoku logic\n *\n * @returns {React.ReactElement} Sudoku\n */\nfunction Sudoku({ numberSelected }) {\n  const [sudoku, setSudoku] = useState([]);\n\n  useEffect(() => {\n    setSudoku(_.times(9, generateRow));\n  }, []);\n\n  /**\n   * @param {number} rowIdx row index of the sudoku cell to change\n   * @param {number} colIdx column index of the sudoku cell to change\n   * @param {number} val value [0, 9] to change to\n   */\n  function setCell(rowIdx, colIdx, val) {\n    const newSudoku = sudoku.slice();\n    newSudoku[rowIdx][colIdx] = val;\n    setSudoku(newSudoku);\n  }\n\n  // console.log('Sudoku in Rows', sudoku);\n\n  return (\n    <Pane display=\"inline-flex\" flexWrap=\"wrap\" width={majorScale(4) * 9}>\n      {\n        sudoku.map((row, rowIdx) => row.map((cell, colIdx) => (\n          <SudokuCell\n            value={cell}\n            onClick={() => setCell(rowIdx, colIdx, numberSelected)}\n          />\n        )))\n      }\n    </Pane>\n  );\n}\n\nSudoku.propTypes = {\n  numberSelected: PropTypes.number.isRequired,\n};\n\nexport default Sudoku;\n","import Sudoku from './Sudoku';\nimport SudokuCell from './SudokuCell';\n\nexport default Sudoku;\n\nexport { SudokuCell };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Radio, Pane } from 'evergreen-ui';\n\n/**\n * Converts a cell value to a number, since the cell value can be a string or a number.\n *\n * @param {number|string} value cell value to be converted\n * @returns {number} corresponding number for the given value\n */\nfunction toNumber(value) {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n\n/**\n * Select which number to input into the Sudoku grid.\n *\n * @param {Function} onChange handle triggers when user selects a different number\n * @returns {React.ReactElement} NumberSelector component\n */\nfunction NumberSelector({ onChange, filledValues, ...props }) {\n  const {\n    margin, marginTop, marginRight, marginBottom, marginLeft,\n  } = props;\n  // Storybook knobs only allow string arrays\n  const filteredValues = filledValues.map(toNumber);\n\n  const radioOptions = _.range(1, 10)\n    .map((option) => (\n      <Radio\n        name=\"group\"\n        key={option}\n        label={option}\n        value={option.toString()}\n        disabled={filteredValues.includes(option)}\n        onChange={(e) => onChange(toNumber(e.target.value))}\n      />\n    ));\n\n  return (\n    <Pane\n      margin={margin}\n      marginTop={marginTop}\n      marginRight={marginRight}\n      marginBottom={marginBottom}\n      marginLeft={marginLeft}\n    >\n      {radioOptions}\n    </Pane>\n  );\n}\n\nNumberSelector.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filledValues: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.number),\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  margin: PropTypes.number,\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n};\n\nNumberSelector.defaultProps = {\n  filledValues: [],\n  margin: undefined,\n  marginTop: undefined,\n  marginRight: undefined,\n  marginBottom: undefined,\n  marginLeft: undefined,\n};\n\nexport default NumberSelector;\n","import NumberSelector from './NumberSelector';\n\nexport default NumberSelector;\n","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { Pane, majorScale } from 'evergreen-ui';\n\nimport Sudoku from '../Sudoku';\nimport NumberSelector from '../NumberSelector';\n\n/**\n * Game component containing the Sudoku and the NumberSelector\n *\n * @returns {React.ReactElement} Game\n */\nfunction Game() {\n  const [numberSelected, setNumberSelected] = useState(0);\n\n  return (\n    <Pane display=\"flex\">\n      <Sudoku numberSelected={numberSelected} />\n      <NumberSelector onChange={setNumberSelected} marginLeft={majorScale(1)} />\n    </Pane>\n  );\n}\n\nexport default Game;\n","import Game from './Game';\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game';\n\n/**\n * Parent wrapper for all React code\n *\n * @returns {React.ReactElement} App\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}